@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox {
	@include flexbox;
}

//----------------------------------

@mixin inline-flex {
	display: -webkit-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}


%inline-flex {
	@include inline-flex;
}

//----------------------------------------------------------------------

@mixin flex-direction($value: row) {
	@if $value==row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	}

	@else if $value==column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	}

	@else if $value==column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	}

	@else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}

	-webkit-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

// Shorter version:
@mixin flex-dir($args...) {
	@include flex-direction($args...);
}

@mixin flex-wrap($value: nowrap) {
	-webkit-flex-wrap: $value;
	flex-wrap: $value;
}


@mixin flex-flow($values: (row nowrap)) {
	-webkit-flex-flow: $values;
	flex-flow: $values;
}

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-ms-flex-order: $int;
	order: $int;
}

//----------------------------------------------------------------------


@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	flex-grow: $int;
}

//----------------------------------------------------------------------

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	flex-shrink: $int;
}

//----------------------------------------------------------------------


@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	flex-basis: $value;
}

//----------------------------------------------------------------------


@mixin flex($fg: 1, $fs: null, $fb: null) {

	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg)=='list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

//----------------------------------------------------------------------


@mixin justify-content($value: flex-start) {
	@if $value==flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	}

	@else if $value==flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	}

	@else if $value==space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	}

	@else if $value==space-around {
		-ms-flex-pack: distribute;
	}

	@else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}

	-webkit-justify-content: $value;
	justify-content: $value;
}

// Shorter version:
@mixin flex-just($args...) {
	@include justify-content($args...);
}

//----------------------------------------------------------------------


@mixin align-items($value: stretch) {
	@if $value==flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	}

	@else if $value==flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	}

	@else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}

	-webkit-align-items: $value;
	align-items: $value;
}



@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	align-self: $value;
}


@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	align-content: $value;
}
